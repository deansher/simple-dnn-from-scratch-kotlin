/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package parts.wisdom.simplednn

import koma.extensions.emul
import koma.extensions.get
import koma.matrix.Matrix
import koma.rand

/**
 * Classifier implemented as a single-layer neural net. The one layer is a fully connected softmax.
 * The loss is cross-entropy.
 */
class SimpleClassifier(val exampleDims: ExampleDims, val numClasses: Int) {
    val biases = rand(1, numClasses)
    val weights = List(numClasses) {
        rand(exampleDims.numRows, exampleDims.numCols)
    }

    fun inferClass(x: Example): Int {
        val weightedSums = Matrix(1, numClasses) { _, clazz ->
            weights[clazz] dot x.matrix
        }
        val logits = weightedSums + biases
        var bestClass = 0
        var bestLogit = logits[0, bestClass]
        for (c in 1 until numClasses) {
            if (logits[0, c] > bestLogit) {
                bestClass = c
                bestLogit = logits[0, c]
            }
        }
        return bestClass
    }
}

private infix fun Matrix<Double>.dot(m: Matrix<Double>) = (this emul m).elementSum()

